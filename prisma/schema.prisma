
generator client {
  provider      = "prisma-client-js"
}

datasource db {
  provider      = "mongodb"
  url           = env("DATABASE_URL")
  relationMode  = "prisma"
}

model User {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  name                String?
  email               String?         @unique
  password            String?
  image               String?
  emailVerified       DateTime?
  emailVerifiedByUser Boolean         @default(true)
  role                Role            @default(USER)
  OTP                 String?
  Bio                 String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  accounts            Account[]
  courses             Course[]
}

model Account {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  userId              String   @db.ObjectId
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?  @db.String
  access_token        String?  @db.String
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?  @db.String
  session_state       String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Category {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  slug            String          @unique
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  topics          Topic[]
}

model Topic {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  slug            String          @unique
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  category        Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      String          @db.ObjectId
  course          Course[]
}

model Course {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  briefDescription    String
  detailDescription   String
  attachment          Attachment?
  topic               Topic?           @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId             String?          @db.ObjectId
  price               Int
  discountPercent     Int
  chapter             Chapter[]

  author              User?            @relation(fields: [authorId], references: [id])
  authorId            String?          @db.ObjectId
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}

model Chapter {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  lecture             Lecture[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  courseId            String?         @db.ObjectId
  course              Course?        @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Lecture {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  url                 String
  preview             Boolean         @default(false)
  chapterId           String?         @db.ObjectId
  chapter             Chapter?        @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}

model Attachment {
    id         String         @id @default(auto()) @map("_id") @db.ObjectId
    name       String
    path       String
    createdAt  DateTime       @default(now())
    updatedAt  DateTime       @updatedAt
    course     Course?        @relation(fields: [courseId], references: [id])
    courseId   String?        @unique @db.ObjectId
}

enum Role {
  ADMIN
  USER
}
